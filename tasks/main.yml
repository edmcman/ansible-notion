- name: Ensure notion build dependencies exist
  apt:
    pkg: 
      - build-essential
      - lua5.4
      - liblua5.4-dev
      - libx11-dev
      - libxext-dev
      - libsm-dev
      - gettext
      - libxinerama-dev
      - libxrandr-dev
      - libxft-dev

- name: Install rofi launcher
  apt:
    pkg: rofi

- name: Check if notion is installed
  stat:
    path: /usr/local/bin/notion
  register: notionbin

- name: Build notion
  block:
    - name: Clone notion git
      git:
        repo: https://github.com/edmcman/notion.git
        #repo: https://github.com/raboof/notion.git
        dest: /usr/local/src/notion
        version: sm_snapshot_test
        single_branch: true
    - name: Build and install notion
      community.general.make:
        chdir: /usr/local/src/notion
        targets:
          - all
          - install
  # when /usr/local/bin/notion doesn't exist
  when: not (notionbin.stat.isreg is defined and notionbin.stat.isreg)

# Gnome 3 without shell works decently, but has some problems like media keys
# not working.  Trying gnome-flashback to address this.
- name: Install gnome-flashback
  apt:
    pkg: gnome-session-flashback

- name: Install notion.desktop
  copy:
    src: notion.desktop
    dest: /usr/share/applications/notion.desktop

- name: Install notion-gnome.desktop
  copy:
    src: notion-gnome.desktop
    dest: /usr/share/xsessions/notion-gnome.desktop

- name: Install notion-gnome-flashback.desktop
  copy:
    src: notion-gnome-flashback.desktop
    dest: /usr/share/xsessions/notion-gnome-flashback.desktop

# These are for running notion with unity.  Since unity is outdated, this is
# deprecated now.
- name: Install notion-unity.desktop
  copy:
    src: notion-unity.desktop
    dest: /usr/share/xsessions/notion-unity.desktop

- name: Install notion-unity.session
  copy:
    src: notion-unity.session
    dest: /usr/share/gnome-session/sessions/notion-unity.session

# To run notion with gnome, we'll copy the existing ubuntu.session file.
- name: Copy ubuntu.session
  copy:
    src: /usr/share/gnome-session/sessions/ubuntu.session
    dest: /usr/share/gnome-session/sessions/notion-gnome.session

- name: Change org.gnome.Shell to notion and add stalonetray
  replace:
    path: /usr/share/gnome-session/sessions/notion-gnome.session
    regexp: 'org\.gnome\.Shell'
    replace: notion;stalonetray

# Same thing, but for gnome-flashback

- name: Copy gnome-flashback-metacity.session to notion-gnome-flashback.session
  copy:
    src: /usr/share/gnome-session/sessions/gnome-flashback-metacity.session
    dest: /usr/share/gnome-session/sessions/notion-gnome-flashback.session

- name: 'notion-gnome-flashback.session: Change metacity to notion and add stalonetray'
  replace:
    path: /usr/share/gnome-session/sessions/notion-gnome-flashback.session
    regexp: 'metacity'
    replace: notion;stalonetray

- name: 'notion-gnome-flashback.session: Remove gnome-panel'
  replace:
    path: /usr/share/gnome-session/sessions/notion-gnome-flashback.session
    regexp: ';gnome-panel'

- name: Copy systemd target for notion-gnome-flashback session to gnome-flashback-metacity session
  copy:
    src: /usr/lib/systemd/user/gnome-session@gnome-flashback-metacity.target.d/
    dest: /usr/lib/systemd/user/gnome-session@notion-gnome-flashback.target.d

# Enabling indicator-application absorbs system trays!
- name: Disable indicator-application
  replace:
    path: /usr/lib/systemd/user/gnome-session@notion-gnome-flashback.target.d/session.conf
    regexp: '^Wants=indicator-application\.service'
    replace: '# indicator-application breaks system tray icons\n# Wants=indicator-application.service'

- name: Install gconf override for notion-gnome-flashback
  copy:
    src: notion-gnome-flashback.gschema.override
    dest: /usr/share/glib-2.0/schemas/01_notion-gnome-flashback.gschema.override
  notify: Compile glib schemas



# There is also
# /usr/lib/systemd/user/gnome-session@ubuntu.target.d/ubuntu.session.conf which
# requires Shell but references the other  components.  Do we need to copy this
# too?

- name: Set META
  lineinfile:
    path: /usr/local/etc/notion/cfg_notion.lua
    regexp: '^--META='
    line: META="Mod4+"
    backup: true
- name: Set ALTMETA
  lineinfile:
    path: /usr/local/etc/notion/cfg_notion.lua
    regexp: '^--ALTMETA='
    line: ALTMETA="Mod1+"
    backup: true
- name: Disable mod_dock
  lineinfile:
    path: /usr/local/etc/notion/cfg_defaults.lua
    state: absent
    line: 'dopath("mod_dock")'
    backup: true
- name: Enable mod_statusbar
  lineinfile:
    path: /usr/local/etc/notion/cfg_notion.lua
    regexp: '^--dopath("mod_statusbar")'
    line: 'dopath("mod_statusbar")'
    backup: true
- name: Set Ed's theme as default
  lineinfile:
    path: /usr/local/etc/notion/cfg_notion.lua
    line: 'dopath("look_ed")'
    backup: true
- name: Set xterm
  lineinfile:
    path: /usr/local/etc/notion/cfg_notion.lua
    regexp: '^--XTERM='
    line: XTERM="x-terminal-emulator"
    backup: true
- name: Define statusbar template
  lineinfile:
    path: /usr/local/etc/notion/cfg_statusbar.lua
    line: '    template="[ %date || %load || %linuxbatt (%linuxbatt_state) ] %systray",'
    insertafter: 'mod_statusbar\.create\{'
    #regexp: '--template='
    backup: true

- name: Install Ed's style file
  copy:
    src: look_ed.lua
    dest: /usr/local/etc/notion/look_ed.lua

- name: Enable notion 3 keybindings
  block:
    - copy:
        src: /usr/local/etc/notion/cfg_notion3_keybindings.lua
        dest: /usr/local/etc/notion/cfg_bindings.lua
        # We do want to overwrite the existing file
        force: true
    - copy:
        src: /usr/local/etc/notion/cfg_notion3_tiling.lua
        dest: /usr/local/etc/notion/cfg_tiling.lua
        # We do want to overwrite the existing file
        force: true

- name: Disable ALTMETA..F4 for ssh
  block:
    - lineinfile:
        path: /usr/local/etc/notion/cfg_bindings.lua
        regexp: '^\s*bdoc\("Query for host to connect to with SSH\."\),'
        line: '    -- bdoc("Query for host to connect to with SSH.")'
        backup: true
    - lineinfile:
        path: /usr/local/etc/notion/cfg_bindings.lua
        regexp: "^\\s*kpress\\(ALTMETA\\.\\.\"F4\", \"mod_query\\.query_ssh\\(_, ':ssh'\\)\"\\),"
        line: "    -- kpress(ALTMETA..\"F4\", \"mod_query.query_ssh(_, ':ssh')\"),"
        backup: true

- name: Use ALTMETA..F4 for rofi for .desktop launcher
  blockinfile:
    path: /usr/local/etc/notion/cfg_bindings.lua
    insertafter: 'defbindings\("WMPlex\.toplevel", \{'
    marker: -- {mark} ANSIBLE MANAGED BLOCK
    block: |
      bdoc("Run a desktop launcher"),
      kpress(ALTMETA.."F4", "mod_query.exec_on_merr(_, 'rofi -show drun')"),

- name: Add frame rename option to Frame context
  lineinfile:
    path: /usr/local/etc/notion/cfg_bindings.lua
    insertafter: '.*menuentry\("Window info",'
    line: menuentry("Rename frame", "mod_query.query_renameframe(_)"),
    backup: true

- name: Download linuxbatt script
  get_url:
    url: https://github.com/raboof/notion/raw/main/contrib/statusd/statusd_linuxbatt.lua
    dest: /usr/local/etc/notion/statusd_linuxbatt.lua
    force: false

- name: Ed's kludges
  blockinfile:
    path: /usr/local/etc/notion/cfg_kludges.lua
    prepend_newline: true
    marker: "-- {mark} ansible section"
    block: |
      -- Put stalonetray in systray
      defwinprop {
          class = "stalonetray",
          statusbar = "systray"
      }

      -- Put stuff in the scratch workspace
      defwinprop {
          class = "Mattermost",
          instance = "mattermost",
          target = "ChatFrame"
      }

      defwinprop {
          class = "ZSTray",
          instance = "ZSTray",
          target = "*scratchws*"
      }

      -- Put chrome personal in the right frame
      defwinprop {
          class = "Personal",
          role = "browser",
          target = "PersonalBrowserFrame"
      }

      -- Put chrome work in the right frame
      defwinprop {
          class = "Google-chrome",
          role = "browser",
          target = "WorkBrowserFrame"
      }

      -- Put chrome work email in the right frame
      defwinprop {
          class = "Work",
          role = "pop-up",
          target = "WorkEmailBrowserFrame"
      }

# stalonetray configuration
- name: Install stalonetray
  apt:
    pkg: stalonetray

- name: Install stalonetray.desktop
  copy:
    src: stalonetray.desktop
    dest: /usr/share/applications/stalonetray.desktop
